import numpy as np
import re
import sys
import csv

l1weight = np.array([[-6.3559e-01, 1.8576e-02, 5.1800e-01, -8.3258e-01, 1.8208e-02,
                    2.8677e+00, -1.3521e+00, -8.9749e-01, -4.1577e-01, 1.5994e+00,
                    -9.0076e-01, 3.6233e-01, -4.8836e-01, 3.1945e-01, 4.5006e-01,
                    -6.0934e-02, 4.9918e-01, -2.3738e-02, 9.0284e-03],
                   [-1.8625e-01, 8.5892e-02, 2.6682e-02, -1.2579e-01, -1.0540e-01,
                    -1.1422e-01, 1.5300e-01, 1.0198e-01, 1.9231e-01, 1.5534e-01,
                    -2.2707e-01, -2.2922e-01, -1.9525e-01, -5.2895e-02, -1.2917e-01,
                    -1.2202e-01, -9.5874e-02, -1.7106e-01, -1.6843e-01],
                   [7.9110e-01, 6.0733e-02, -3.0487e-01, 6.8033e-01, -1.2914e-02,
                    -2.5059e+00, 1.2871e+00, 9.3748e-01, 3.1337e-01, -1.4015e+00,
                    6.6064e-01, -5.2650e-01, 5.1930e-01, -2.7831e-01, 1.8041e-02,
                    1.1022e-01, -6.2100e-02, -2.7368e-02, 3.7673e-01],
                   [-5.7792e-01, -1.1253e-02, 5.4330e-01, -6.6634e-01, 5.7798e-02,
                    2.8655e+00, -1.8220e+00, -7.7497e-01, -2.6253e-01, 1.9079e+00,
                    -6.2937e-01, 4.0368e-01, -6.0236e-01, 4.3048e-01, 3.9408e-01,
                    -2.8454e-02, 5.1113e-01, 3.8371e-02, -1.7778e-01],
                   [4.3118e-01, -1.3529e-01, -4.5527e-01, 9.0359e-01, 2.1687e-01,
                    -1.9859e+00, 1.2527e+00, 5.7407e-01, 2.7876e-01, -1.4446e+00,
                    9.2505e-01, -7.7765e-01, 4.7224e-01, -1.8223e-01, 1.5519e-01,
                    8.1223e-02, 1.1531e-01, 1.1209e-01, 4.8967e-01],
                   [6.7778e-01, -1.1930e-01, -1.2494e-01, 6.3619e-01, 1.7413e-01,
                    -2.4754e+00, 1.4973e+00, 8.3337e-01, 4.3480e-01, -1.5444e+00,
                    6.3356e-01, -7.1375e-01, 3.7141e-01, 6.0211e-02, 1.4731e-02,
                    -3.9764e-02, -8.7412e-02, -1.9793e-01, 4.3509e-01],
                   [-5.6776e-01, -4.6002e-02, 2.5510e-01, -6.4341e-01, 1.8453e-01,
                    2.1813e+00, -1.3042e+00, -5.0003e-01, -2.4967e-01, 1.0416e+00,
                    -6.0290e-01, 6.6488e-01, -5.2495e-01, 9.2347e-02, -1.2395e-01,
                    1.8822e-01, 2.2879e-01, 1.4790e-02, -1.7647e-02],
                   [9.8849e-01, -4.2630e-01, -3.8171e-01, 5.1637e-01, 2.3886e-01,
                    -2.1873e+00, 1.2664e+00, 7.7291e-01, 4.0988e-01, -1.1989e+00,
                    8.9521e-01, -7.2839e-01, 7.3404e-01, -3.7354e-01, -1.1516e-01,
                    -2.0003e-01, -5.2016e-01, -3.2959e-01, 3.6456e-01],
                   [-4.2904e-01, 2.2835e-01, 6.0894e-01, -8.1215e-01, -2.0588e-01,
                    2.5648e+00, -1.7184e+00, -1.1052e+00, -3.9759e-01, 1.5504e+00,
                    -6.9483e-01, 3.7302e-01, -7.0374e-01, 1.6552e-01, 1.8373e-01,
                    3.1211e-01, 3.0609e-01, 7.4424e-02, -9.7931e-02],
                   [9.0769e-01, -1.8788e-03, -1.7464e-01, 6.2126e-01, -1.4855e-02,
                    -2.3822e+00, 1.8087e+00, 9.1517e-01, 4.2818e-01, -1.5571e+00,
                    5.0155e-01, -6.1673e-01, 8.0868e-01, -1.1190e-01, -1.5520e-01,
                    -3.5082e-01, -4.7230e-01, -1.9653e-01, 2.9230e-02],
                   [2.6775e-02, -9.1775e-02, 2.0280e-01, -1.5660e-01, -9.5453e-02,
                    1.3879e-01, 1.4313e-01, -1.2075e-01, 1.3022e-01, -2.2445e-01,
                    4.5157e-02, 4.9197e-02, -1.3725e-01, -1.3292e-02, 1.1163e-01,
                    -1.2652e-01, -1.8088e-01, -1.5334e-01, -3.6223e-02],
                   [3.7386e-01, 2.3597e-02, -3.2636e-01, 7.8367e-01, -4.1414e-02,
                    -2.4316e+00, 1.3762e+00, 9.1440e-01, 2.8766e-01, -1.3891e+00,
                    7.8202e-01, -7.3099e-01, 6.8396e-01, -3.3447e-01, -4.7182e-02,
                    -1.5330e-02, -4.5978e-01, 9.8781e-02, 3.3571e-01],
                   [4.8929e-01, 1.4399e-01, -2.7499e-01, 8.2520e-01, 1.8522e-01,
                    -2.4219e+00, 1.2357e+00, 7.7780e-01, 4.8978e-02, -1.1743e+00,
                    8.6777e-01, -7.8512e-01, 4.9976e-01, -6.9514e-02, 1.0968e-01,
                    1.2763e-01, -1.7850e-01, -1.1236e-01, 4.2931e-01],
                   [-7.8235e-01, 9.8228e-02, 4.4537e-01, -8.9744e-01, 4.7856e-02,
                    2.6541e+00, -1.5655e+00, -9.2352e-01, -5.5426e-01, 1.8170e+00,
                    -6.6572e-01, 5.9261e-01, -6.4904e-01, 4.2833e-01, 2.9641e-01,
                    1.4347e-01, 2.2574e-01, 8.3072e-02, -1.3030e-01],
                   [4.9962e-01, 4.1436e-02, -4.2921e-01, 8.7140e-01, 1.1958e-01,
                    -2.5478e+00, 1.5431e+00, 5.6318e-01, 3.0613e-01, -1.1033e+00,
                    1.0098e+00, -6.7992e-01, 6.7153e-01, -1.4981e-01, -2.0158e-01,
                    -9.3023e-03, -3.9720e-01, 5.5400e-04, 4.8040e-01]])

l1bias = np.array([0.2183, -0.1467, 0.2034, 0.1283, -0.0704, 0.0940, 0.0806, -0.0476,
                 0.1162, 0.0659, -0.1786, -0.0319, 0.1764, 0.1003, -0.0651])

l11weight = np.array([[-2.3114e-01, -1.2420e-01, 1.3728e-01, -1.2128e-01, -2.5589e-01,
                     1.2597e-01, 1.7693e-02, -2.5776e-01, 1.7102e-01, -1.5229e-01,
                     2.4887e-01, 1.1246e-01, 1.3667e-01, 1.8982e-01, -4.8609e-02],
                    [5.7342e-01, 3.6155e-02, -1.7135e-01, 6.2292e-01, -1.3531e-01,
                     -1.0278e-01, 3.2996e-01, -3.2095e-01, 7.9879e-01, -2.2771e-01,
                     -8.9776e-02, -5.6282e-01, -1.5861e-01, 8.2431e-01, -7.1573e-01],
                    [-7.3892e-02, 7.6254e-02, 4.3538e-01, -5.2990e-01, 3.9910e-01,
                     6.1056e-01, -1.3151e-01, 9.6682e-01, -5.6161e-01, 4.4063e-01,
                     -1.7591e-02, 4.7793e-01, 4.5713e-01, -7.4397e-01, 1.1569e+00],
                    [-3.4763e-01, 6.4019e-02, 3.7865e-01, -5.1989e-01, 3.5788e-01,
                     3.3687e-01, -5.9977e-01, 1.0128e+00, -4.0015e-01, 3.7543e-01,
                     -1.3320e-01, 6.7588e-01, 5.1228e-01, -8.9870e-01, 9.7151e-01],
                    [7.2915e-03, 1.5947e-01, 4.0291e-01, -6.8476e-01, 7.4109e-01,
                     5.3433e-01, -2.3548e-01, 9.3134e-01, -2.9120e-01, 5.9368e-01,
                     -7.5280e-03, 4.6774e-01, 5.2352e-01, -9.2069e-01, 1.3255e+00],
                    [-7.7697e-02, 1.5264e-01, -5.1329e-02, 2.7854e-01, -2.6166e-01,
                     -1.9465e-01, -1.0297e-01, -1.0028e-01, -2.7978e-02, 2.4906e-01,
                     7.0370e-02, 4.3943e-02, -1.4637e-01, -1.6128e-01, -3.4042e-01],
                    [4.7631e-01, -2.3573e-01, -1.2957e-01, 8.9797e-01, -4.1410e-01,
                     -2.8246e-03, 4.6935e-01, -5.3331e-01, 4.6895e-01, -4.5734e-01,
                     5.4399e-02, -6.9677e-01, 4.6520e-02, 6.0393e-01, -5.3708e-01],
                    [3.0806e-01, 2.3693e-01, -6.2578e-04, 6.7732e-01, -2.2253e-01,
                     -1.0393e-01, 6.5644e-01, -5.3807e-01, 7.8350e-01, -5.6585e-01,
                     -8.1069e-02, -6.7339e-01, -6.3374e-02, 5.2692e-01, -5.6057e-01],
                    [4.6941e-01, 4.6065e-02, 2.5285e-01, 3.6499e-01, 5.5751e-02,
                     -3.8380e-02, 1.1035e-01, -5.0994e-01, 1.0539e-01, -3.1154e-01,
                     7.0542e-02, -2.4495e-01, 2.9671e-01, 3.2713e-01, -8.6257e-01],
                    [-2.8580e-01, -6.6502e-02, 3.5307e-01, -3.3146e-01, 4.0464e-01,
                     -3.0143e-02, -1.2770e-01, 7.9714e-01, -2.7600e-01, 1.6366e-01,
                     -6.8887e-03, 1.7802e-01, 1.8466e-01, -1.0133e-01, 7.5561e-01]])

l11bias = np.array([-0.0991, 0.3621, -0.1313, 0.1376, 0.3505, 0.1028, 0.2503, 0.2406,
                  0.2876, 0.0599])

l2weight = np.array([[-0.0328, -0.3843, 0.3719, 0.3763, 0.2193, -0.1492, -0.5375, -0.2918,
                    0.0537, 0.2036],
                   [-0.0022, -0.3757, 0.6120, 0.7683, 0.8416, 0.3016, -0.3524, -0.3106,
                    0.1129, 0.2727],
                   [0.1648, -0.4400, 1.0904, 1.2051, 1.0011, -0.0602, -0.6330, -0.9391,
                    -0.3272, 0.6603],
                   [-0.0499, 0.8961, -0.8382, -0.4282, 0.0185, -0.2353, 0.7651, 0.5784,
                    0.5763, -0.3624],
                   [-0.0540, 0.1408, -0.2309, -0.0206, -0.0888, -0.2490, -0.1675, 0.2232,
                    -0.2127, 0.1669]])

l2bias = np.array([0.3712, 0.0892, 0.4636, 0.4918, -0.0088])

l3weight = np.array([[0.2238, 0.5395, 0.8381, -0.5909, -0.3397],
                   [-0.5288, -0.6911, -0.2431, 1.0423, -0.1869],
                   [0.0503, -0.0821, -0.1596, -0.1761, -0.3561]])

l3bias = np.array([0.0211, 0.5415, -0.1678])


def preproc(raw_data):
    data = []

    if raw_data[0] == '' or raw_data[6] == '':
        return []

    data.append(int(raw_data[0][0]))
    data.append(int(raw_data[1][0]))
    data.append(int(raw_data[2][0]))

    if 'People' in raw_data[3]:
        data.append(1)
    else:
        data.append(0)

    if 'Cars' in raw_data[3]:
        data.append(1)
    else:
        data.append(0)

    if 'Cats' in raw_data[3]:
        data.append(1)
    else:
        data.append(0)

    if 'Fireworks' in raw_data[3]:
        data.append(1)
    else:
        data.append(0)

    if 'Explosions' in raw_data[3]:
        data.append(1)
    else:
        data.append(0)

    if 'Parents' in raw_data[4]:
        data.append(1)
    else:
        data.append(0)

    if 'Siblings' in raw_data[4]:
        data.append(1)
    else:
        data.append(0)

    if 'Friends' in raw_data[4]:
        data.append(1)
    else:
        data.append(0)

    if 'Teacher' in raw_data[4]:
        data.append(1)
    else:
        data.append(0)

    data.extend(get_number_list_clean(raw_data[5]))

    data.append(float(raw_data[6].replace(',', '')))
    data.append(float(raw_data[7].replace(',', '')))

    return data


def get_number_list(s):
    """Get a list of integers contained in string `s`
    """
    return [int(n) for n in re.findall("(\d+)", str(s))]


def get_number_list_clean(s):
    """Return a clean list of numbers contained in `s`.

    Additional cleaning includes removing numbers that are not of interest
    and standardizing return list size.
    """
    s = s.replace("3-D", '')
    s = s.replace("14-dimensional", '')
    n_list = get_number_list(s)
    n_list += [-1]*(5-len(n_list))
    return n_list


def predict(x):

    x = np.array(preproc(x))

    if len(x) < 2:
        return -1

    x = x / 100
    # First layer of NN
    h1 = l1weight @ x + l1bias
    # Applying ReLU
    h1[h1 < 0] = 0

    h2 = l11weight @ h1 + l11bias
    h2[h2 < 0] = 0

    h3 = l2weight @ h2 + l2bias
    h3[h3 < 0] = 0

    h4 = l3weight @ h3 + l3bias

    # Returning the class
    return np.argmax(h4) +1


if __name__ == "__main__":
    # check if the argument <test_data.csv> is provided
    if len(sys.argv) < 2:
        print("""
    Usage:
        python example_pred.py <test_data.csv>

    As a first example, try running `python example_pred.py example_test_set.csv`
    """)
        exit()

    # store the name of the file containing the test data
    filename = sys.argv[-1]

    # read the file containing the test data
    # you do not need to use the "csv" package like we are using
    # (e.g. you may use numpy, pandas, etc)
    # data = csv.DictReader(open(filename))

    # This code doesn't open the file as a Dictionary
    # This code assumes that the first row is column names and skips them

    data = csv.reader(open(filename, encoding='utf8'))
    data.__next__()


    for test_example in data:
        # obtain a prediction for this test example
        # test_example = np.array(test_example) / 100
        # for i in range(60):
        pred = predict(test_example)

        # print the prediction to stdout
        print(pred)
